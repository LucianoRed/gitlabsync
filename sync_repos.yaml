- hosts: localhost
  tasks:
  - name: Inculde vars from config.yaml
    include_vars: config.yaml

  - name: Create empty vars
    set_fact:
      repo_array: []
      user_array: []
      user_array_json: []
      dst_user_array: []

  - name: Create local temp repos
    file:
      path: repos
      state: directory
      mode: '0755'

  - name: Get all users
    uri:
     url: "{{ src_git_url }}/api/v4/users?page={{ item }}&per_page=400"
     headers:
      PRIVATE-TOKEN: "{{ src_access_token }}"
    loop: "{{ [1, 2, 3]}}"
    register: users

  - name: Loop over users to generate users array
    set_fact:
       user_array_json: "{{ user_array_json + [ item.json ]}}"
    with_items: "{{ users.results }}"

  - name: Loop over users
    set_fact:
     user_array: "{{ user_array |  default([]) + [ { 'id': item.id, 'username': item.username, 'email' : item.email, 'name': item.name} ] }}"
    with_items: "{{ user_array_json }}"

  - name: Create users on destination gitlab
    uri:
     url: "{{ dst_git_url }}/api/v4/users"
     method: POST
     validate_certs: false
     body:
     - [ email, "{{ item.email }}" ]
     - [ name, "{{ item.name }}" ]
     - [ username, "{{ item.username }}" ]
     - [ force_random_password, "true" ]
     body_format: form-urlencoded
     status_code: [201, 400, 409]
     headers:
      PRIVATE-TOKEN: "{{ dst_access_token }}"
    with_items: "{{ user_array }}"
    ignore_errors: yes

  - name: Get all src projects
    uri:
     url: "{{ src_git_url }}/api/v4/projects"
     headers:
      PRIVATE-TOKEN: "{{ src_access_token }}"     
    register: src_projects


  - name: Loop over src projects
    set_fact:
     repo_array: "{{ repo_array |  default([]) + [ { 'http_url_to_repo': item.http_url_to_repo, 'name': item.name, 'path' : item.path, 'visibility': item.visibility, 'owner': item.owner.username, 'ownerid' : item.owner.id } ] }}"
    when: item.http_url_to_repo.split('/')[-2] != 'gitlab-instance-c9629139'
    with_items: "{{ src_projects.json }}"
  
  - debug: var=repo_array

  - name: Get all dst users
    uri:
     url: "{{ dst_git_url }}/api/v4/users"
     validate_certs: false
     headers:
      PRIVATE-TOKEN: "{{ dst_access_token }}"     
    register: dst_users

  - name: Loop over dst users
    set_fact:
     dst_user_array: "{{ dst_user_array |  default([]) + [ { 'id': item.id, 'username': item.username, 'email' : item.email, 'name': item.name} ] }}"
    with_items: "{{ dst_users.json }}"

  - name: Create projects on destination gitlab
    uri:
     url: "{{ dst_git_url }}/api/v4/projects/user/{{ dst_user_array | selectattr('username', 'equalto', item.owner) | map(attribute='id')  | min  }}?name={{ item.name }}"
     method: POST
     validate_certs: false
     body:
     - [ name, "{{ item.name }}" ]
     - [ visibility, "{{ item.visibility }}" ]
     - [ pages_access_level, "{{ item.pages_access_level }}" ]
     - [ user_id, "{{ dst_user_array | selectattr('username', 'equalto', item.owner) | map(attribute='id')  | min  }}" ]
     body_format: json
     status_code: [201, 400]
     headers:
      PRIVATE-TOKEN: "{{ dst_access_token }}"          
    with_items: "{{ repo_array }}"
    ignore_errors: yes

  - name: Clone mirror for repos
    shell: "git clone --mirror http://oauth2:{{ src_access_token }}@{{ item.http_url_to_repo | regex_replace('http://', '') }} repos/{{ item.owner }}/{{ item.http_url_to_repo.split('/')[-1]}}/"
    with_items: "{{ repo_array }}"
    # ignore_errors: yes   

  - name: Push repo on new Gitlab
    shell: "cd repos/{{ item.owner }}/{{ item.http_url_to_repo.split('/')[-1]}}/ && git remote set-url --push origin https://oauth2:{{ dst_access_token }}@{{ dst_git_url | regex_replace('http://', '') }}/{{ item.owner }}/{{ item.http_url_to_repo.split('/')[-1]}} && git push --mirror"
    with_items: "{{ repo_array }}"
    # ignore_errors: yes       